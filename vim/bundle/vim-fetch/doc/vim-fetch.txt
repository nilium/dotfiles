*vim-fetch.txt*        For Vim version 7.0 or better          version 3.0.0


		VIM REFERENCE for the Fetch plug-in


Jump to lines and columns specified in buffer names	*vim-fetch*

1. Introduction				|vim-fetch-introduction|
2. Position specifications		|vim-fetch-specs|
3. Usage				|vim-fetch-usage|
4. Troubleshooting			|vim-fetch-troubleshooting|
   Bugs					|vim-fetch-bugs|
5. Credits and license			|vim-fetch-credits-license|

{not available when |'compatible'| is set}

==============================================================================
1. Introduction					*vim-fetch-introduction*

vim-fetch enables Vim to process line and column jump specifications in file
paths as found in stack traces and similar output. When asked to open such
a file, Vim with vim-fetch will jump to the specified line (and column, if
given) instead of displaying an empty, new file.

==============================================================================
2. Position specifications			*vim-fetch-specs*

vim-fetch understands the following position specifications ("specs"):


COLON SEPARATED

1. path/to/file.ext:lnum
2. path/to/file.ext:lnum:
3. path/to/file.ext:lnum:colnum
4. path/to/file.ext:lnum:colnum:


PARENTHESES ENCLOSED

5. path/to/file.ext(lnum)
6. path/to/file.ext(lnum:colnum)


PLAN 9 STYLE

7. path/to/file.ext:#lnum

Note: `#` is the alternate file token and needs to be escaped to be used on
the command line (see |cmdline-special|).


PYTEST METHOD JUMPS

8. path/to/file.ext::method

Note: this will only find Python method definitions.


OTHER SPEC TYPES

If you would you like to see other specs in vim-fetch, open an issue (or even
better: send a PR) for them at

	https://github.com/kopischke/vim-fetch

==============================================================================
3. Usage					*vim-fetch-usage*


FROM OUTSIDE VIM:
>
	vim path/to/file.ext:12:3
<
will open `file.ext` and jump to line 12, column 3.

This works for multiple files (|arglist| passing) in any mix of spec'ed and
unspec'ed paths, and with all Vim |windows-opening| switches ('-o', '-O', and
'-p' if compiled with |+windows|)


FROM INSIDE VIM:
>
	:e[dit] path/to/file.ext:100:12
<
will open `file.ext` and jump to line 100, column 12.

This works for any command that opens files with |edit| semantics, including
|argedit|, |pedit| and |diffsplit| on local file systems (e.g. not for |netrw|
remote editing).

Using |gF| on either |<cfile>| or a visual selection will recognize trailing
vim-fetch specs besides the ones supported by Vim, e.g, with the cursor at the
position indicated by `^`
>
	Debug info: path^/to/file.ext(170:5)
<
a normal mode `gF` will open `file.ext` and jump to line 170, column 5.


INTEGRATION:

1. Position buffer local variable		*b:fetch_lastpos*

After processing a spec for a buffer, vim-fetch sets a buffer-local variable:
>
	let b:fetch_lastpos = [lnum, colnum]
<
You can use the presence and / or values of that variable to integrate
with vim-fetch.

2. Autocommand API				*vim-fetch-autocommands*

vim-fetch triggers two |User| autocommand events when setting the position in
a buffer: *BufFetchPosPre* before and *BufFetchPosPost* after.

Notes: `BufFetchPosPost` is fired if the position fetch function completes,
it does not guarantee the final position of the cursor.

==============================================================================
4. Troubleshooting			*vim-fetch-troubleshooting*


I STILL GET EMPTY FILES WITH LINE NUMBERS WITH FETCH INSTALLED

1. You may be trying to resolve a position specification not supported by
vim-fetch. See |vim-fetch-specs|.

2. Your Vim is compiled without the |+autocmd| feature. vim-fetch needs the
|autocommand| functionality to do its magic. If your Vim copy does not support
autocommands, you can still use the `:Fetch` command vim-fetch defines in that
case (and only in that case) while editing the spurious empty buffer Vim opens
when you try to edit a file with a position specification.

3. You have found a bug. See |vim-fetch-bugs|.


I HAVE FILES WITH THE POSITION SPEC IN MY BUFFER LIST

vim-fetch uses the |BufNewFile| event to trigger the loading; if your buffers
have never actually entered a window yet, they are still listed in their
spec'ed form. Correct loading will happen when you select them for editing.


I HAVE A FILE WITH THE POSITION SPEC ON MY ARG LIST BESIDES THE CORRECT ONE

Your Vim version is compiled without the |+listcmds| feature. Without this
feature, there is no |:argdelete| command, which is required for vim-fetch to
delete the spurious entry from the argument list.


I CAN'T JUMP TO LINE 8

If you use an edit command with a file token like `%` or `#` with a trailing
colon spec and the line number is 8, Vim will parse that as the file name
modifier |%:8|. Escape the first colon or prepend a 0 to the line number to
avoid the issue.


I TRIED TO EDIT A FILE WITH A PLAN 9 STYLE SPEC AND GOT ANOTHER FILE (OR E194)

`#` is the alternate file token; you need to escape it to use it literally:
>
	:e path/to/file.ext:\#lnum
<

I CAN'T JUMP TO LINES IN REMOTE FILES VIA NETRW

This is by design: vim-fetch needs to check if a readable file exists the
position spec can be applied to. Doing that remotely, even when possible,
would add too much latency to file opening.


:DROP'ING A SPEC TO AN OPEN FILE DOES NOT ACTIVATE ITS WINDOW

Short answer: this is a limitation of the way vim-fetch works.

Long answer: when you |:drop| a spec'ed file, the |:drop| command looks for
the spec'ed version in your open windows, which it doesn't find. It then
"loads" the spec'ed buffer, i.e. creates a spurious one, which vim-fetch in
turn switches out against the correct one; however, vim-fetch has no way to
detect the buffer was originally created by a |:drop| command, so the switch
happens in place, instead of in the window where the buffer is already open.


MY PROBLEM ISN'T LISTED HERE		*vim-fetch-bugs*

You might have found a bug. Please check if there is an open an issue at

	https://github.com/kopischke/vim-fetch/issues

and open one if there is not. Please do not forget to list the steps to
reproduce the issue as well as your Vim version and platform.

==============================================================================
5. Credits and License			*vim-fetch-credits-license*

vim-fetch was created by Martin Kopischke

	http://martin.kopischke.net

but development is essentially dormant. If you are interested in taking over
maintainership for the plug-in, open an issue for that on GitHub (see |vim-fetch-bugs|).

It is licensed under the terms of the MIT license according to the accompanying
license file (LICENSE.md). It is inspired by, but not based on, the `file_line`
plug-in by Victor Bogado (https://github.com/bogado/file-line).

vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:fdm=marker:
